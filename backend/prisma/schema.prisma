// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  passwordHash String
  name         String?
  phone        String?
  role         Role       @default(CUSTOMER)
  status       UserStatus @default(ACTIVE)
  cart         Cart?

  // housekeeping
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  refreshTokens      RefreshToken[]
  PasswordResetToken PasswordResetToken[]
  Address            Address[]
  CustomerProfile    CustomerProfile[]
  Order              Order[]

  @@index([role])
  @@index([status])
}

model RefreshToken {
  id                String    @id @default(cuid())
  userId            String
  tokenHash         String // store ONLY the hash of the refresh token
  expiresAt         DateTime
  createdAt         DateTime  @default(now())
  revokedAt         DateTime?
  replacedByTokenId String?
  createdByIp       String?
  revokedByIp       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tokenHash])
  @@index([expiresAt])
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String // SHA-256 of the raw token
  expiresAt DateTime
  usedAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tokenHash])
  @@index([expiresAt])
}

enum AddressType {
  SHIPPING
  BILLING
}

model Address {
  id         String      @id @default(cuid())
  userId     String
  type       AddressType
  line1      String
  line2      String?
  city       String
  state      String?
  postalCode String?
  country    String // e.g., "LK", "US"
  phone      String?
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, type, isDefault])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model CustomerProfile {
  userId      String    @id // 1:1 with User
  dateOfBirth DateTime?
  gender      Gender?
  avatarUrl   String?
  notes       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  slug     String     @unique
  parentId Int? // For subcategories
  parent   Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToSubcategory")
  products Product[]
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  description String
  slug        String           @unique
  categoryId  Int
  category    Category         @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  CartItem    CartItem[]
  OrderItem   OrderItem[]
}

model ProductVariant {
  id        Int            @id @default(autoincrement())
  productId Int
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  size      String
  color     String
  price     Float
  quantity  Int
  status    StockStatus    @default(IN_STOCK)
  images    ProductImage[]
  CartItem  CartItem[]
  OrderItem OrderItem[]
}

model ProductImage {
  id        Int            @id @default(autoincrement())
  variantId Int
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  url       String
}

enum StockStatus {
  IN_STOCK
  OUT_OF_STOCK
  PRE_ORDER
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int            @id @default(autoincrement())
  cart      Cart           @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product        @relation(fields: [productId], references: [id])
  productId Int
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId Int
  quantity  Int            @default(1)
}

// ====== Enums ======
enum OrderStatus {
  PROCESSING
  FULFILLED
  CANCELLED
}

enum PaymentMethod {
  CARD
}

// ====== Models ======
model AddressSnapshot {
  id                String   @id @default(cuid())
  // A denormalized, immutable copy captured at order time
  userId            String?
  originalAddressId String?
  fullName          String?
  line1             String
  line2             String?
  city              String
  state             String?
  postalCode        String?
  country           String
  phone             String?
  createdAt         DateTime @default(now())

  orders Order[]

  @@index([userId])
}

model Order {
  id                String          @id @default(cuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  status            OrderStatus     @default(PROCESSING)
  paymentMethod     PaymentMethod   @default(CARD)
  paymentRef        String?
  items             OrderItem[]
  // Snapshot of shipping address captured at time of order
  shippingAddressId String
  shippingAddress   AddressSnapshot @relation(fields: [shippingAddressId], references: [id])

  // Money fields â€” Float as requested
  itemsTotal  Float
  shippingFee Float    @default(0)
  discount    Float    @default(0)
  totalAmount Float // itemsTotal + shippingFee - discount
  paidAmount  Float // full amount for this project
  paidAt      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
}

model OrderItem {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  variantId Int
  variant   ProductVariant @relation(fields: [variantId], references: [id])

  quantity  Int
  unitPrice Float // price captured at purchase time (from variant.price)
  lineTotal Float

  // nice-to-have denorm to show historical names/colors/sizes even if product changes later
  productName  String
  variantSize  String?
  variantColor String?

  @@index([orderId])
}
